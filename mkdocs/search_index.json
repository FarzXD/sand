{
    "docs": [
        {
            "location": "/", 
            "text": "Sand JS\n\n\nWhat is Sand?\n\n\nSand is a lightweight, all-purpose Javascript application framework. Sand provides a simple, yet robust, application lifecycle and many pluggable clients and libraries. A Sand application loads only the clients and libraries that it requires to do its job, allowing the application to be as simple as possible.\n\n\nWhy Sand?\n\n\nIn 3 words, \nSand is simple\n.\n\n\nYou can create \nANY\n kind of Node.js application, script, or service using Sand.\n\n\nThe simplest Sand application is shown below.\n\n\n```Node.js\nvar Sand = require('sand');\nnew Sand().start(function () {\n  console.log('Hello, World!');\n});\n\n\n\nYet, Sand can do a lot more than this.\n\n### Requirements\nCurrently, Sand is developed on [io.js](https://iojs.org/) using EcmaScript 6. So far, Sand has not been extensively tested on Node.js v0.12, but we expect that it will work there too.\n\n### Show me the code!\nSee the [examples repository](https://github.com/SandJS/examples).\n\n### Miscellaneous Resources \n Gotchas regarding EcmaScript 6\n* For a brief description of EcmaScript 6 Features, see [here](https://github.com/lukehoban/es6features).\n* For more information on ES6 in io.js, see [here](https://iojs.org/en/es6.html).\n* You will notice that many of the source files of Sand require `\nuse strict\n` for compatibility with certain recently added keywords such as `let`, `const`, `class` and others.\n\n### Getting Started\nSand has two components. The Sand core and the Sand Grain. These two components are tied together by the application lifecycle.\n\n#### Sand Core \n Application Lifecycle\nThe core of every Sand application is the [sand](https://www.npmjs.com/package/sand) module.\n\nSand was built to orchestrate an application's **intitialization**, **startup**, and **shutdown**. These are the three phases in the Sand application lifecycle.\n\n1. The **Initialization** phase loads configuration and prepares the application to receive requests. The function `Sand#init(function() { // ... })` allows you to initialize or preload any resources your app requires before starting.\n\n2. The **Startup** phase starts the application. The `start` event will be fired on application startup. The function `Sand#start(function() { // ... })` starts the application and accepts an optional callback function as an argument. Note that the callback function is called **after** the application starts.\n\n3. The **Shutdown** phase gracefully closes down the application. The `shutdown` event will be fired on application shutdown.\n\nEvery application has access to the `sand` global variable which holds references to all the grains that your app has loaded.\n\n#### Sand Grains\nA Sand Grain is small piece of functionality required by an application. It is usually a client or library wrapper that autoloads its own configuration and provides convenience functions.\n\nSand grains have the same three events as the app lifecycle. The Sand core calls the `SandGrain#init` and `SandGrain#shutdown` methods on each sand grain.\n\nA basic sand grain looks like this.\n\n```Node.js\n\nuse strict\n;\n\nconst SandGrain = require('sand-grain');\n\nclass Cheese extends SandGrain {\n\n  constructor() {\n    super();\n    this.name = 'cheese'; // the logging name\n    this.configName = 'cheese'; // the name of its configuration file\n    this.defaultConfig = {cheese: 'white cheddar'}; // a default config object when no config is specified\n    this.version = require('./package').version; // sets the grain's version\n  }\n\n  init(config, done) {\n    super.init(config); // this must be called\n\n    // configure your grain here\n    // `this.config` holds the config object for this grain\n\n    this.log(`I'm initializing! :D`);\n    done(); // indicates that this grain is done initializing\n  }\n\n  shutdown(done) {\n    this.log(`I'm shutting down! :(`);\n    // do shutdown stuff here (i.e. close the server gracefully, etc)\n    done();\n  }\n\n  jusEatinMyCheese() {\n    this.log(`Jus' eatin' my ${this.config.cheese}!`);\n    return 'ok? ok!';\n  }\n}\n\nmodule.exports = Cheese;\n\n\n\n\nEvery Sand Grain gets loaded onto the \nsand\n global variable on initialization.", 
            "title": "Home"
        }, 
        {
            "location": "/#sand-js", 
            "text": "What is Sand?  Sand is a lightweight, all-purpose Javascript application framework. Sand provides a simple, yet robust, application lifecycle and many pluggable clients and libraries. A Sand application loads only the clients and libraries that it requires to do its job, allowing the application to be as simple as possible.  Why Sand?  In 3 words,  Sand is simple .  You can create  ANY  kind of Node.js application, script, or service using Sand.  The simplest Sand application is shown below.  ```Node.js\nvar Sand = require('sand');\nnew Sand().start(function () {\n  console.log('Hello, World!');\n});  \nYet, Sand can do a lot more than this.\n\n### Requirements\nCurrently, Sand is developed on [io.js](https://iojs.org/) using EcmaScript 6. So far, Sand has not been extensively tested on Node.js v0.12, but we expect that it will work there too.\n\n### Show me the code!\nSee the [examples repository](https://github.com/SandJS/examples).\n\n### Miscellaneous Resources   Gotchas regarding EcmaScript 6\n* For a brief description of EcmaScript 6 Features, see [here](https://github.com/lukehoban/es6features).\n* For more information on ES6 in io.js, see [here](https://iojs.org/en/es6.html).\n* You will notice that many of the source files of Sand require ` use strict ` for compatibility with certain recently added keywords such as `let`, `const`, `class` and others.\n\n### Getting Started\nSand has two components. The Sand core and the Sand Grain. These two components are tied together by the application lifecycle.\n\n#### Sand Core   Application Lifecycle\nThe core of every Sand application is the [sand](https://www.npmjs.com/package/sand) module.\n\nSand was built to orchestrate an application's **intitialization**, **startup**, and **shutdown**. These are the three phases in the Sand application lifecycle.\n\n1. The **Initialization** phase loads configuration and prepares the application to receive requests. The function `Sand#init(function() { // ... })` allows you to initialize or preload any resources your app requires before starting.\n\n2. The **Startup** phase starts the application. The `start` event will be fired on application startup. The function `Sand#start(function() { // ... })` starts the application and accepts an optional callback function as an argument. Note that the callback function is called **after** the application starts.\n\n3. The **Shutdown** phase gracefully closes down the application. The `shutdown` event will be fired on application shutdown.\n\nEvery application has access to the `sand` global variable which holds references to all the grains that your app has loaded.\n\n#### Sand Grains\nA Sand Grain is small piece of functionality required by an application. It is usually a client or library wrapper that autoloads its own configuration and provides convenience functions.\n\nSand grains have the same three events as the app lifecycle. The Sand core calls the `SandGrain#init` and `SandGrain#shutdown` methods on each sand grain.\n\nA basic sand grain looks like this.\n\n```Node.js use strict ;\n\nconst SandGrain = require('sand-grain');\n\nclass Cheese extends SandGrain {\n\n  constructor() {\n    super();\n    this.name = 'cheese'; // the logging name\n    this.configName = 'cheese'; // the name of its configuration file\n    this.defaultConfig = {cheese: 'white cheddar'}; // a default config object when no config is specified\n    this.version = require('./package').version; // sets the grain's version\n  }\n\n  init(config, done) {\n    super.init(config); // this must be called\n\n    // configure your grain here\n    // `this.config` holds the config object for this grain\n\n    this.log(`I'm initializing! :D`);\n    done(); // indicates that this grain is done initializing\n  }\n\n  shutdown(done) {\n    this.log(`I'm shutting down! :(`);\n    // do shutdown stuff here (i.e. close the server gracefully, etc)\n    done();\n  }\n\n  jusEatinMyCheese() {\n    this.log(`Jus' eatin' my ${this.config.cheese}!`);\n    return 'ok? ok!';\n  }\n}\n\nmodule.exports = Cheese;  Every Sand Grain gets loaded onto the  sand  global variable on initialization.", 
            "title": "Sand JS"
        }, 
        {
            "location": "/Grains/http/", 
            "text": "Sand HTTP\n\n\nHttp Server for Sand\n\n\nInstall\n\n\nnpm install sand-http", 
            "title": "Http"
        }, 
        {
            "location": "/Grains/http/#sand-http", 
            "text": "Http Server for Sand  Install  npm install sand-http", 
            "title": "Sand HTTP"
        }
    ]
}